/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package funcionesvectores;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author usuario
 */
public class CrearVector extends javax.swing.JFrame {

    /**
     * Crea una nueva ventana con una tabla en la que aparece una columna con
     * las posiciones del vector y otra vacía en donde el usuario la llenará
     * con los números que desee
     */
    public CrearVector() {
        initComponents();
        //la tabla obtiene los elementos del vector de referencia en GUI
        tablaVector.setTransferHandler(null);
        DefaultTableModel model = (DefaultTableModel) tablaVector.getModel();
        for (int i = 0; i < GUI.arregloNumeros.getTamano(); i++) {
            model.addRow(new Object[]{(i+1),""});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVector = new javax.swing.JTable();
        guardar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        regresar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaVector.setFont(new java.awt.Font("Cambria Math", 0, 13)); // NOI18N
        tablaVector.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Posición", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaVector.setRowSelectionAllowed(false);
        tablaVector.getTableHeader().setReorderingAllowed(false);
        tablaVector.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tablaVectorKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tablaVector);
        if (tablaVector.getColumnModel().getColumnCount() > 0) {
            tablaVector.getColumnModel().getColumn(0).setResizable(false);
            tablaVector.getColumnModel().getColumn(1).setResizable(false);
        }

        guardar.setFont(new java.awt.Font("Constantia", 0, 13)); // NOI18N
        guardar.setText("Guardar");
        guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardarMouseClicked(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Constantia", 0, 13)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Por favor ingrese los elementos que desea en su vector en la tabla de abajo.\n\nEn la columna derecha, presione click sobre la celda correspondiente al valor\nque desee agregar, escriba el número y presione Enter para guardar el valor.\nFinalmente, presione el botón Guardar para crear el vector");
        jScrollPane2.setViewportView(jTextArea1);

        regresar.setText("Regresar");
        regresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                regresarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 123, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(guardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(regresar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(guardar)
                        .addContainerGap(24, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(regresar)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaVectorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaVectorKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE
                || c == KeyEvent.VK_MINUS)) {
            evt.consume();
        }              
    }//GEN-LAST:event_tablaVectorKeyTyped

    /**
     * Este método realiza diferentes acciones.
     * Primero, crea dos vectores: arregloN, en el que se guardarán los datos introducidos
     * por el usuario para enviarlos al final al vector de referencia en GUI. Y
     * posVacios, que guardará las posiciones en donde no se introduzcan datos
     * Para obtener los datos, recorre la segunda columna de la tabla y comienza
     * a llenar los datos de arregloN, siempre que no haya un dato vacío. Si esto
     * ocurre, la posición se envía al vector posVacios.
     * Luego, si hay posiciones vacías, se abre un jOptionPane, que permite al
     * usuario llenar estas con ceros. Si así lo decide, se realiza este proceso
     * y se envía el vector a GUI, para luego abrir una nueva Ventana1. Si no
     * hay espacios vacíos, se envía directamente a GUI
     * @param evt Se ejecuta al hacer click en Guardar
     */
    private void guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseClicked
        Vector arregloN = new Vector(GUI.arregloNumeros.getTamano());
        Vector posVacios = new Vector();
        boolean vacios = false;
        for (int i = 0; i < arregloN.getTamano(); i++) {
            try {//si el dato es un número entero, se guarda en arregloN
                int aux = Integer.parseInt(String.valueOf(tablaVector.getValueAt(i, 1)));
                arregloN.agregarDato(aux, i);
            }catch(NumberFormatException e){//sino, se guarda la posición en posVacios                
                posVacios.agregarDato(i);  
                vacios =true;
            }
        }
        if (vacios == true){//si hay vacíos, se pregunta al usuario si desea llenar
                    //las posiciones vacías con 0
            int eleccion = JOptionPane.showOptionDialog(null,"Una o más posiciones están vacías,\n"
                + "¿Desea continuar y llenarlas con 0?" , "Posiciones Vacías",
                0, 0, null, new Object[]{"Sí","No"}, null);
            //si elige Sí, se llenan y se envía el vector
            if(eleccion == JOptionPane.YES_OPTION){
                for (int j = 0; j < posVacios.getPosUltima(); j++) {
                    arregloN.agregarDato(0, posVacios.obtenerElemento(j));
                }
                GUI.arregloNumeros = arregloN;
                Ventana1 resultado = new Ventana1();
                resultado.setVisible(true);
                resultado.setLocationRelativeTo(null);
                this.setVisible(false);
                this.dispose();
            }
            //si elige no, se cierra el JOptionPane y el usuario puede continuar
            //llenando posiciones manualmente
            else if (eleccion == JOptionPane.NO_OPTION){

            }
        }
        else{//si no hay posiciones vacías, se envían los datos directamente
            GUI.arregloNumeros = arregloN;
            Ventana1 resultado = new Ventana1();
            resultado.setVisible(true);
            resultado.setLocationRelativeTo(null);
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_guardarMouseClicked

    /**
     * Este método, regresa a la ventana GUI, para crear un nuevo vector
     * @param evt Se ejecuta al presionar Regresar
     */
    private void regresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regresarMouseClicked
        GUI interfaz = new GUI();
        interfaz.setVisible(true);
        interfaz.setLocationRelativeTo(null);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_regresarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrearVector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrearVector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrearVector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearVector.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrearVector().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton guardar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton regresar;
    public static javax.swing.JTable tablaVector;
    // End of variables declaration//GEN-END:variables
}
